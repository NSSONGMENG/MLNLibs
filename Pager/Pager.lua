---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by momo.
--- DateTime: 2020/3/3 下午8:49
---

require("util.PreloadRequire")

--- item距离屏幕边距，影响item宽度，以及两侧item缩放
local kSpaceWidth = 30
--- itme宽度
local kItemWidth= kScreenWidth - kSpaceWidth * 2
--- item高度
local kItemHeight = 422
--- item数据量，总的可显示item数为kCellCount + 2
local kCellCount = 10


local PageCell = require("util.BaseClass"):extend()
function PageCell:createSubview(dismissBlock)
    self.dataList = {}
    self.contentView = LinearLayout(LinearType.VERTICAL)
            :width( kItemWidth)
            :height(kItemHeight)
            :bgColor(WHITE)
            :setGravity(Gravity.CENTER)
            :cornerRadius(15)
            :clipToBounds(true)

    self.closeImage = ImageView()
            :width(24)
            :height(24)
            :image("https://s.momocdn.com/w/u/others/custom/lua/vcaht/sweet/level/gift/close.png")
            :setGravity(Gravity.CENTER)
    self.closeBtn = View()
            :width(48)
            :height(48)
            :setGravity(Gravity.RIGHT)
            :addView(self.closeImage)
            :onClick(dismissBlock or function()  end)

    self.titleLabel = Label()
            :fontNameSize(PF_REGULAR, 18)
            :marginTop(- 18)
            :setGravity(Gravity.CENTER)
            :textColor(HEX(0x323333))
    --:text("百年好合头像框")

    self.subTitleLabel = Label()
            :fontNameSize(PF_REGULAR, 14)
            :textColor(HEX(0xAAAAAA))
            :marginTop(6)
            :setGravity(Gravity.CENTER)
    --:text("还差11000资产值可领取")

    self.contentView:addViews(self.closeBtn, self.titleLabel, self.subTitleLabel)
    self:createTableView()
    return self
end

function PageCell:createTableView()
    self.adapter = TableViewAutoFitAdapter()
    self.adapter:sectionCount(function() return 1  end)
    self.adapter:rowCount(function() return 6  end)
    self.adapter:reuseId(function() return "normal"  end)
    self.adapter:initCellByReuseId("normal", function(cell)
        cell.v = View():width(kItemWidth - 40):height(68):marginTop(8):bgColor(Color(250, 180, 10, 1))
        cell.contentView:addView(cell.v)
    end)
    self.adapter:fillCellDataByReuseId("normal", function(cell, _, row)

    end)
    self.adapter:selectedRowByReuseId("normal", function() end)

    self.tableView = TableView()
            :width(kItemWidth - 40)
            :marginTop(7)
            :height(MeasurementType.MATCH_PARENT)
            :setGravity(Gravity.CENTER)
            :adapter(self.adapter)
    self.contentView:addView(self.tableView)

    return self
end

function PageCell:fillData()

end

function PageCell:setCurrentOffset(x)
    self.position_x = self.position_x or 0
    local offset = math.abs(x - self.position_x)
    local total = kItemWidth + kSpaceWidth
    if offset <= total then
        if IS_IOS then
            --offset = total - offset
            --local scale = 1 - offset / total
            --local offset_w = 30 - 30 * scale
            --scale = 1 - offset_w / kItemWidth
            -- 以上表达式整理如下：
            local scale = 1 - kSpaceWidth * offset / total / kItemWidth
            self.contentView:scale(scale, scale, true)
        else
            offset = total - offset
            local scale = offset / total
            local offset_w = 30 - 30 * scale
            local offset_h = 42 - 42 * scale
            self.contentView:width(kItemWidth - offset_w):height(kItemHeight - offset_h)
            self.tableView:width(kItemWidth - 40 - offset_w)
        end
    end
end


---------------------------------------------------------
---------------------------------------------------------
----------------------- 分页视图 -------------------------
---------------------------------------------------------
---------------------------------------------------------


local Pager = require("util.BaseClass"):extend()

function Pager:createSubview()
    self.dataSource = {}
    self.contentView = View()
            :setGravity(Gravity.CENTER)
            :width(MeasurementType.MATCH_PARENT)
            :height(MeasurementType.MATCH_PARENT)
            :clipToBounds(true)
            :onClick(function()  end)
            :bgColor(white(0, 0.6))

    self.collectionLayout = CollectionViewGridLayoutFix()
            :lineSpacing(0)
            :itemSpacing(0)
            :spanCount(1)

    -- 为避免两端可以过量滑动，设置宽度为：kScreenWidth + 2 * (kItemWidth - kSpaceWidth)，计算做相应调整
    self.collectionView = CollectionView()
            :layout(self.collectionLayout)
            :scrollDirection(ScrollDirection.HORIZONTAL)
            :setGravity(Gravity.CENTER)
            :width(kScreenWidth + 2 * (kItemWidth - kSpaceWidth))
            :showScrollIndicator(false)
            :height(kItemHeight)

    self.contentView:addView(self.collectionView)
    self:createAdapter()
    self:scrollControl()
    return self
end

function Pager:createAdapter()
    self.adapter = CollectionViewAdapter()
    self.adapter:sectionCount(function()
        return 1
    end)
    self.adapter:rowCount(function()
        return kCellCount + 2
    end)
    self.adapter:reuseId(function(_, row)
        if row == 1 or row == kCellCount + 2 then
            return "space"
        end
        return "normal"
    end)
    self.adapter:sizeForCellByReuseId("normal", function()
        return Size(kItemWidth, kItemHeight)
    end)
    self.adapter:sizeForCellByReuseId("space", function()
        return Size(kItemWidth, kItemHeight)
    end)

    self.adapter:initCellByReuseId("normal", function(cell)
        local weak_self = __weak(self)
        cell.m = PageCell():createSubview(function()
            local s = __weak[weak_self]
            if s then
                s:dismiss()
            end
        end)
        cell.contentView:addView(cell.m.contentView)

        -- 缓存cells
        self.cells = self.cells or {}
        if not self.cells[cell.m] then
            self.cells[cell.m] = true
        end
    end)
    self.adapter:fillCellDataByReuseId("normal", function(cell, _, row)
        if cell.m then
            cell.m.position_x = (row - 1) * kItemWidth
            cell.m.titleLabel:text("Pager index : " .. row - 1)
            cell.m.subTitleLabel:text("MLN ———— 让移动开发更简单")
        end
    end)

    self.adapter:initCellByReuseId("space", function(cell)
        cell.v = View():width(kItemWidth):height(kItemHeight)
        cell.contentView:addView(cell.v)
    end)
    self.adapter:fillCellDataByReuseId("space", function()  end)
    self.adapter:selectedRowByReuseId("space", function() end)
    self.adapter:selectedRowByReuseId("normal", function() end)
    self.collectionView:adapter(self.adapter)
end

function Pager:fillData(data, aimIndex)
    if type(data) ~= "table" then
        self.collectionView:reloadData()
        System:setTimeOut(function()
            -- 滚动才能触发cell缩放
            self.collectionView:setOffsetWithAnim(Point(1, 0));
        end, 0.01)
        return
    end

    -- 数据源
    self.dataList = data.list
    kCellCount = #data.list

    -- reloadData
    self.collectionView:reloadData()

    System:setTimeOut(function()
        self.collectionView:setOffsetWithAnim(Point(aimIndex * kItemWidth, 0));
    end, 0.01)
end

function Pager:scrollControl()
    self.scrollBeginTime = 0
    self.scrollBeginX = 0

    local weak_self = __weak(self)
    self.collectionView:setScrollBeginCallback(function()
        local s = __weak[weak_self]
        if s then
            s.scrollBeginTime = mmos:time()
            s.scrollBeginX = s.collectionView:contentOffset():x()
        end
    end)
    self.collectionView:setScrollingCallback(function()
        local s = __weak[weak_self]
        if s then
            local x = s.collectionView:contentOffset():x()
            s:cellSizeConfig(x)
        end
    end)
    self.collectionView:setEndDraggingCallback(function(x, y)
        local s = __weak[weak_self]
        if s then
            s:configOffsetX(x, y)
        end
    end)
end

function Pager:configOffsetX(x, y)
    -- RunLoop切换
    System:setTimeOut(function()
        local offset_x = 0
        local time = mmos:time() - self.scrollBeginTime
        local index = math.floor(x / kItemWidth) + 1
        local index_position = index * kItemWidth

        local toLeft = x > self.scrollBeginX
        if self.scrollBeginTime == 0 then
            toLeft = self.toLeft
        end

        if toLeft then
            -- 左滑
            if time < 0.2 or index_position - x <= kScreenWidth/2 or self.scrollBeginTime == 0 then
                offset_x = index_position
            else
                offset_x = index_position - kItemWidth
            end

            self.toLeft = true
        else
            -- 右滑
            if time < 0.2 or index_position - x >= kScreenWidth/2 or self.scrollBeginTime == 0 then
                offset_x = index_position - kItemWidth
            else
                offset_x = index_position
            end
            self.toLeft = false
        end

        if offset_x < 0 then offset_x = 0 end
        if offset_x > kCellCount * kItemWidth - kItemWidth then offset_x = kCellCount * kItemWidth - kItemWidth end

        self.scrollBeginX = offset_x
        self.formerPosition = offset_x
        self.scrollBeginTime = 0
        self.collectionView:setOffsetWithAnim(Point(offset_x, y))
    end, 0.01)
end

function Pager:cellSizeConfig(x)
    for cell, _ in pairs(self.cells) do
        -- 不直接使用x是为了补齐collection宽度超过屏幕宽度导致的偏移差
        cell:setCurrentOffset(x + kItemWidth - kSpaceWidth)
    end
end

function Pager:show(data)
    self:fillData(data)
    self.contentView:hidden(true)
    window:addView(self.contentView)

    System:setTimeOut(function()
        self.contentView:hidden(false)

        Animation():setScaleX(0.3, 1)
                   :setScaleY(0.3, 1)
                   :setDuration(0.3)
                   :setAlpha(0, 1.0)
                   :setInterpolator(InterpolatorType.AccelerateDecelerate)
                   :start(self.collectionView)

        FrameAnimation()
                :setBgColor(CLEAR, white(0,0.6))
                :setDuration(0.3)
                :setAlpha(0, 1)
                :setInterpolator(InterpolatorType.AccelerateDecelerate)
                :start(self.contentView)
    end, 0.25)
end

function Pager:dismiss()
    local weak_self = __weak(self)
    Animation()
            :setScaleY(1, 0.3)
            :setScaleX(1, 0.3)
            :setAlpha(1.0, 0.0)
            :setInterpolator(InterpolatorType.AccelerateDecelerate)
            :setDuration(0.3)
            :start(self.collectionView)

    FrameAnimation()
            :setBgColor(white(0,0.6), CLEAR)
            :setDuration(0.3)
            :setAlpha(1, 0)
            :setInterpolator(InterpolatorType.AccelerateDecelerate)
            :start(self.contentView)
            :setEndCallback(function()
        if __weak[weak_self] then
            __weak[weak_self].contentView:removeFromSuper()
        end
    end)
end

--return Pager
-- 创建一个测试弹窗
Pager():createSubview():show()